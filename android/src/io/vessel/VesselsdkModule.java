/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package io.vessel;

import java.util.HashMap;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;

import android.app.Activity;
import android.content.Context;

import com.vessel.VesselAB;
import com.vessel.VesselSDK;
import com.vessel.enums.VesselEnums.TestVariation;
import com.vessel.errors.VesselError;
import com.vessel.interfaces.ABListener;
import com.vessel.interfaces.VesselListener;

@Kroll.module(name="Vesselsdk", id="io.vessel")
public class VesselsdkModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "VesselsdkModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public VesselsdkModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		//Log.d(TAG, "inside onAppCreate");
	}
	
	@Override
	public void onPause(Activity activity)
	{
		// This method is called when the root context is being suspended
		Log.d(TAG, "VesselSDK onPause()");
		VesselAB.onPause();
		super.onPause(activity);
	}

	@Override
	public void onResume(Activity activity)
	{	
		// This method is called when the root context is being resumed
		Log.d(TAG, "VesselSDK onResume()");
		VesselAB.onResume();
		super.onResume(activity);
	}
	
	@Kroll.method
	public void initialize(Object secretKey)
	{
		String key = TiConvert.toString(secretKey);
		Context ctx = TiApplication.getInstance().getApplicationContext();
		Log.d(TAG, "Initialize called " + key);
		VesselSDK.initialize(ctx, key);
	}

	
	@Kroll.method
	public boolean isTestRunning() {
		Log.d(TAG, "isTestRunning called");
		return VesselAB.isTestRunning();
	}
	
	@Kroll.method
	public void setABListener(final KrollFunction testLoaded, final KrollFunction testNotAvailable) {
		VesselAB.setABListener(new ABListener() {
			@Override
			public void testNotAvailable(TestVariation arg0) {
				HashMap<String, String> hash = new HashMap<String, String>();
				hash.put("variation", TestVariation.NOTAVAILABLE.toString());
				testNotAvailable.call(getKrollObject(), hash);
			}
			
			@Override
			public void testLoading() {
				// Not supported by iOS
			}
			
			@Override
			public void testLoaded(String arg0, TestVariation arg1) {
				HashMap<String, String> hash = new HashMap<String, String>();
				hash.put("test", arg0);
				hash.put("variation", arg1.toString());
				testLoaded.call(getKrollObject(), hash);
			}
		});
	}
	
	@Kroll.method
	public String whichVariation(Object testName) {
		Log.d(TAG, "whichVariation called " + testName);
		TestVariation var = null;
		if (testName != null) {
			var =  VesselAB.whichVariation(TiConvert.toString(testName));
		} else {
			var = VesselAB.whichVariation();
		}
		
		if (var != null) {
			return var.toString();
		} else {
			return null;
		}
	}

	@Kroll.method
	public String whichVariationTestId(Object testId) {
		TestVariation var = null;
		if (testId != null) {
			var =  VesselAB.whichVariation(TiConvert.toInt(testId));
		} else {
			return null;
		}
		if (var != null) {
			return var.toString();
		} else {
			return null;
		}
	}

	@Kroll.method
	public String whichTest() {
		Log.d(TAG, "whichTest called");
		return VesselAB.whichTest();
	}

	@Kroll.method
	public boolean isTestVariationRunning(Object testName, Object variation) {
		String test = TiConvert.toString(testName);
		String var = TiConvert.toString(variation);
		
		if (var == null) {
			return false;
		}
		
		if (var.equalsIgnoreCase("a")) {
			return VesselAB.isTestVariationRunning(test, TestVariation.A);
		} else if(var.equalsIgnoreCase("b")) {
			return VesselAB.isTestVariationRunning(test, TestVariation.B);
		}
		return false;
	}

	
	@Kroll.method
	public long getTestId() {
		return VesselAB.getTestId();
	}
	
	@Kroll.method
	public void discardAllSession() {
		VesselAB.discardAllSession();
	}
	
	@Kroll.method
	public void startSession(Object sesseionName) {
		VesselAB.startSession(TiConvert.toString(sesseionName));
	}
	
	@Kroll.method
	public void endSession(Object sesseionName) {
		VesselAB.endSession(TiConvert.toString(sesseionName));
	}
	
	@Kroll.method
	public void endAllSessions() {
		VesselAB.endAllSessions();
	}
	
	@Kroll.method
	public void checkPointVisited(Object chkPtName) {
		VesselAB.checkPointVisited(TiConvert.toString(chkPtName));
	}
	
	@Kroll.method
	public String getValue(Object key, Object defaultVal) {
		return VesselAB.getValue(TiConvert.toString(key),
					TiConvert.toString(defaultVal));
	}
	
	@Kroll.method
	public void reloadTest() {
		VesselAB.reloadTest();
	}
	
	
	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(TAG, "example called");
		return "hello world";
	}
	
	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(TAG, "get example property");
		return "hello world";
	}
	
	
	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(TAG, "set example property: " + value);
	}

}

